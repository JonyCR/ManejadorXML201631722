/* The following code was generated by JFlex 1.6.1 */

/*------------  1ra Area: Codigo de Usuario ---------*/
//------> Paquetes, Importaciones
package backend.analizadores;
import java_cup.runtime.*;
import java.util.ArrayList;

/*------------  2da Area: Opciones y Declaraciones ---------*/

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>A_LexicoXML.flex</tt>
 */
public class Analizador_Lexico_XML implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
    11, 11, 11, 11, 11, 11, 11, 11, 11,  4,  3, 67,  4,  2, 11, 11, 
    11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,  0,  0,  0,  0, 
     4, 18, 22, 17, 15, 16, 16, 16, 65, 65, 16, 16, 16, 13, 12, 10, 
    19, 19, 20, 21,  1,  1,  1,  1,  1,  1,  9, 16, 47, 46, 48, 18, 
    16, 26, 41, 28, 24, 35, 60, 57, 58, 23, 64, 11, 54, 45, 33, 31, 
    55, 50, 39, 36, 37, 43, 52, 59, 56, 11, 63, 61,  0, 62,  0, 14, 
     0, 25, 40, 27, 66, 34, 66, 11,  5, 29, 11, 11, 53, 44, 32, 30, 
     7, 49, 38,  8,  6, 42, 51, 11, 11, 11, 11,  0, 65,  0,  0, 11, 
    11, 11, 11, 11, 11, 68, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 
    11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 
     0, 18, 11, 11, 11, 11,  0,  0,  0,  0, 11,  0,  0, 11,  0,  0, 
     0,  0,  0,  0,  0, 11,  0,  0,  0,  0, 11,  0,  0,  0,  0, 18, 
    11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 
    11, 11, 11, 11, 11, 11, 11,  0, 11, 11, 11, 11, 11, 11, 11, 11, 
    11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 
    11, 11, 11, 11, 11, 11, 11,  0, 11, 11, 11, 11, 11, 11, 11, 11
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\1\1\4\4\1\1\5"+
    "\1\6\1\7\2\1\75\0\1\10\1\11\16\0\1\12"+
    "\1\13\32\0\1\14\41\0\1\15\42\0\1\16\1\17"+
    "\14\0\1\20\4\0\1\21\3\0\1\22\1\23\4\0"+
    "\1\24\1\0\1\25\3\0\1\26\6\0\1\27\7\0"+
    "\1\30\4\0\1\31\1\0\1\32\3\0\1\33\3\0"+
    "\1\34\2\0\1\35\1\36\1\37\3\0\1\40\3\0"+
    "\1\41\2\0\1\42\14\0\1\43\1\44\2\0\1\45"+
    "\1\0\1\46\1\47\1\50\1\0\1\51\25\0\1\52"+
    "\11\0\1\53\1\0\1\54\14\0\1\55\1\56\15\0"+
    "\1\57\16\0\1\60\16\0\1\61\2\0\1\62\11\0"+
    "\1\63\1\64\2\0\1\65\2\0\1\66\3\0\1\67"+
    "\2\0\1\70\2\0\1\71\1\72";

  private static int [] zzUnpackAction() {
    int [] result = new int[418];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\105\0\212\0\105\0\317\0\u0114\0\105\0\u0159"+
    "\0\u019e\0\u01e3\0\u0228\0\105\0\105\0\105\0\u026d\0\u02b2"+
    "\0\u02f7\0\u033c\0\u0381\0\u03c6\0\u040b\0\u0450\0\u0495\0\u04da"+
    "\0\u051f\0\u0564\0\u05a9\0\u05ee\0\u0633\0\u0678\0\u06bd\0\u0702"+
    "\0\u0747\0\u078c\0\u07d1\0\u0816\0\u085b\0\u08a0\0\u08e5\0\u092a"+
    "\0\u096f\0\u09b4\0\u09f9\0\u0a3e\0\u0a83\0\u0ac8\0\u0b0d\0\u0b52"+
    "\0\u0b97\0\u0bdc\0\u0c21\0\u0c66\0\u0cab\0\u0cf0\0\u0d35\0\u0d7a"+
    "\0\u0dbf\0\u0e04\0\u0e49\0\u0e8e\0\u0ed3\0\u0f18\0\u0f5d\0\u0fa2"+
    "\0\u0fe7\0\u102c\0\u1071\0\u10b6\0\u10fb\0\u1140\0\u1185\0\u11ca"+
    "\0\u120f\0\u1254\0\u1299\0\u12de\0\u1323\0\105\0\105\0\u1368"+
    "\0\u13ad\0\u13f2\0\u1437\0\u147c\0\u14c1\0\u1506\0\u154b\0\u1590"+
    "\0\u15d5\0\u161a\0\u165f\0\u16a4\0\u16e9\0\105\0\105\0\u172e"+
    "\0\u1773\0\u17b8\0\u17fd\0\u1842\0\u1887\0\u18cc\0\u1911\0\u1956"+
    "\0\u199b\0\u19e0\0\u1a25\0\u1a6a\0\u1aaf\0\u1af4\0\u1b39\0\u1b7e"+
    "\0\u1bc3\0\u1c08\0\u1c4d\0\u1c92\0\u1cd7\0\u1d1c\0\u1d61\0\u1da6"+
    "\0\u1deb\0\105\0\u1e30\0\u1e75\0\u1eba\0\u1eff\0\u1f44\0\u1f89"+
    "\0\u1fce\0\u2013\0\u2058\0\u209d\0\u20e2\0\u2127\0\u216c\0\u21b1"+
    "\0\u21f6\0\u223b\0\u2280\0\u22c5\0\u230a\0\u234f\0\u2394\0\u23d9"+
    "\0\u241e\0\u2463\0\u24a8\0\u24ed\0\u2532\0\u2577\0\u25bc\0\u2601"+
    "\0\u2646\0\u268b\0\u26d0\0\105\0\u2715\0\u275a\0\u279f\0\u27e4"+
    "\0\u2829\0\u286e\0\u28b3\0\u28f8\0\u293d\0\u2982\0\u29c7\0\u2a0c"+
    "\0\u2a51\0\u2a96\0\u2adb\0\u2b20\0\u2b65\0\u2baa\0\u2bef\0\u2c34"+
    "\0\u2c79\0\u2cbe\0\u2d03\0\u2d48\0\u2d8d\0\u2dd2\0\u2e17\0\u2e5c"+
    "\0\u2ea1\0\u2ee6\0\u2f2b\0\u2f70\0\u2fb5\0\u2ffa\0\u303f\0\105"+
    "\0\u3084\0\u30c9\0\u310e\0\u3153\0\u3198\0\u31dd\0\u3222\0\u3267"+
    "\0\u32ac\0\u32f1\0\u3336\0\u337b\0\105\0\u33c0\0\u3405\0\u344a"+
    "\0\u348f\0\105\0\u34d4\0\u3519\0\u355e\0\105\0\105\0\u35a3"+
    "\0\u35e8\0\u362d\0\u3672\0\105\0\u36b7\0\105\0\u36fc\0\u3741"+
    "\0\u3786\0\105\0\u37cb\0\u3810\0\u3855\0\u389a\0\u38df\0\u3924"+
    "\0\105\0\u3969\0\u39ae\0\u39f3\0\u3a38\0\u3a7d\0\u3ac2\0\u3b07"+
    "\0\105\0\u3b4c\0\u3b91\0\u3bd6\0\u3c1b\0\105\0\u3c60\0\105"+
    "\0\u3ca5\0\u3cea\0\u3d2f\0\105\0\u3d74\0\u3db9\0\u3dfe\0\105"+
    "\0\u3e43\0\u3e88\0\u3ecd\0\105\0\u3f12\0\u3f57\0\u3f9c\0\u3fe1"+
    "\0\105\0\u4026\0\u406b\0\u40b0\0\105\0\u40f5\0\u413a\0\u417f"+
    "\0\u41c4\0\u4209\0\u424e\0\u4293\0\u42d8\0\u431d\0\u4362\0\u43a7"+
    "\0\u43ec\0\u4431\0\u4476\0\u44bb\0\105\0\105\0\u4500\0\u4545"+
    "\0\105\0\u458a\0\105\0\105\0\105\0\u45cf\0\105\0\u4614"+
    "\0\u4659\0\u469e\0\u46e3\0\u4728\0\u476d\0\u47b2\0\u47f7\0\u483c"+
    "\0\u4881\0\u48c6\0\u490b\0\u4950\0\u4995\0\u49da\0\u4a1f\0\u4a64"+
    "\0\u4aa9\0\u4aee\0\u4b33\0\u4b78\0\105\0\u4bbd\0\u4c02\0\u4c47"+
    "\0\u4c8c\0\u4cd1\0\u4d16\0\u4d5b\0\u4da0\0\u4de5\0\105\0\u4e2a"+
    "\0\105\0\u4e6f\0\u4eb4\0\u4ef9\0\u4f3e\0\u4f83\0\u4fc8\0\u500d"+
    "\0\u5052\0\u5097\0\u50dc\0\u5121\0\u5166\0\105\0\105\0\u51ab"+
    "\0\u51f0\0\u5235\0\u527a\0\u52bf\0\u5304\0\u5349\0\u538e\0\u53d3"+
    "\0\u5418\0\u545d\0\u54a2\0\u54e7\0\105\0\u552c\0\u5571\0\u55b6"+
    "\0\u55fb\0\u5640\0\u5685\0\u56ca\0\u570f\0\u5754\0\u5799\0\u57de"+
    "\0\u5823\0\u5868\0\u58ad\0\105\0\u58f2\0\u5937\0\u597c\0\u59c1"+
    "\0\u5a06\0\u5a4b\0\u5a90\0\u5ad5\0\u5b1a\0\u5b5f\0\u5ba4\0\u5be9"+
    "\0\u5c2e\0\u5c73\0\105\0\u5cb8\0\u5cfd\0\105\0\u5d42\0\u5d87"+
    "\0\u5dcc\0\u5e11\0\u5e56\0\u5e9b\0\u5ee0\0\u5f25\0\u5f6a\0\105"+
    "\0\105\0\u5faf\0\u5ff4\0\105\0\u6039\0\u607e\0\105\0\u60c3"+
    "\0\u6108\0\u614d\0\105\0\u6192\0\u61d7\0\105\0\u621c\0\u6261"+
    "\0\105\0\105";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[418];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\2\2\1\3\1\4\1\5\2\2\1\6\2\2\1\7"+
    "\13\2\1\10\2\2\2\11\5\2\2\12\2\13\12\2"+
    "\1\14\1\15\1\16\2\2\2\17\2\2\1\6\5\2"+
    "\1\20\5\2\112\0\1\4\105\0\1\5\131\0\2\21"+
    "\67\0\3\22\7\0\1\23\2\0\1\24\1\0\1\25"+
    "\2\0\1\26\1\0\1\27\1\0\1\30\1\31\1\32"+
    "\3\0\1\33\1\0\1\34\1\0\1\35\11\0\1\36"+
    "\4\0\1\37\16\0\1\40\24\0\2\41\10\0\1\40"+
    "\75\0\2\42\53\0\1\43\36\0\1\43\70\0\2\44"+
    "\53\0\1\45\3\46\1\47\3\50\1\46\1\0\1\50"+
    "\1\0\1\51\2\52\1\46\1\53\1\0\3\45\1\0"+
    "\1\54\1\55\3\50\1\56\10\50\1\57\7\50\1\60"+
    "\3\0\3\50\1\61\2\50\1\62\5\50\2\0\1\50"+
    "\1\63\1\46\1\50\1\0\1\50\46\0\2\64\36\0"+
    "\1\65\3\0\4\65\2\0\1\65\1\0\3\65\3\0"+
    "\3\65\1\0\27\65\3\0\14\65\2\0\2\65\1\0"+
    "\1\65\1\0\1\65\30\0\1\66\115\0\1\67\24\0"+
    "\1\70\2\0\1\71\52\0\1\72\26\0\1\73\65\0"+
    "\1\74\110\0\1\75\76\0\1\76\66\0\1\77\104\0"+
    "\1\100\13\0\1\101\100\0\1\102\111\0\1\103\77\0"+
    "\1\104\77\0\1\105\115\0\1\106\107\0\2\107\70\0"+
    "\2\110\124\0\2\111\56\0\1\112\5\0\1\112\134\0"+
    "\2\113\17\0\1\114\3\46\4\50\1\46\1\0\1\50"+
    "\1\115\1\46\2\50\1\46\2\0\3\114\1\0\27\50"+
    "\3\0\14\50\1\0\1\116\2\50\1\46\1\50\1\0"+
    "\1\50\1\0\11\46\1\0\1\46\1\0\4\46\2\0"+
    "\3\46\1\0\27\46\3\0\14\46\1\0\1\117\4\46"+
    "\1\0\1\46\1\0\1\50\3\46\1\50\1\120\2\50"+
    "\1\46\1\0\1\50\1\115\1\46\2\50\1\46\2\0"+
    "\3\50\1\0\27\50\3\0\14\50\1\0\1\117\2\50"+
    "\1\46\1\50\1\0\1\50\1\0\1\50\3\46\4\50"+
    "\1\46\1\0\1\50\1\115\1\46\2\50\1\46\2\0"+
    "\3\50\1\0\27\50\3\0\14\50\1\0\1\117\2\50"+
    "\1\46\1\50\1\0\1\50\1\0\1\121\3\46\4\121"+
    "\1\46\1\0\1\121\1\0\3\121\1\46\2\0\3\121"+
    "\1\0\27\121\3\0\14\121\1\0\1\117\2\121\1\46"+
    "\1\121\1\0\1\121\1\0\1\122\3\46\4\122\1\46"+
    "\1\0\1\122\1\115\1\121\2\122\1\46\2\0\3\122"+
    "\1\0\27\122\3\0\14\122\1\0\1\117\2\122\1\46"+
    "\1\122\1\0\1\122\1\0\1\123\21\0\3\123\2\0"+
    "\5\123\5\0\2\123\4\0\2\123\22\0\1\123\5\0"+
    "\1\123\3\0\1\50\3\46\4\50\1\46\1\0\1\50"+
    "\1\115\1\46\2\50\1\46\2\0\3\50\1\0\26\50"+
    "\1\124\3\0\14\50\1\0\1\117\1\125\1\50\1\46"+
    "\1\50\1\0\1\50\1\0\1\50\3\46\4\50\1\46"+
    "\1\0\1\50\1\115\1\46\2\50\1\46\2\0\3\50"+
    "\1\0\14\50\1\126\12\50\3\0\14\50\1\0\1\117"+
    "\2\50\1\46\1\50\1\0\1\50\1\0\1\50\3\46"+
    "\4\50\1\46\1\0\1\50\1\115\1\46\2\50\1\46"+
    "\2\0\3\50\1\0\14\50\1\127\12\50\3\0\14\50"+
    "\1\0\1\117\2\50\1\46\1\50\1\0\1\50\1\0"+
    "\1\50\3\46\4\50\1\46\1\0\1\50\1\115\1\46"+
    "\2\50\1\46\2\0\3\50\1\0\1\130\26\50\3\0"+
    "\14\50\1\0\1\117\2\50\1\46\1\50\1\0\1\50"+
    "\1\0\1\50\3\46\4\50\1\46\1\0\1\50\1\115"+
    "\1\46\2\50\1\46\2\0\3\50\1\0\14\50\1\131"+
    "\12\50\3\0\14\50\1\0\1\117\2\50\1\46\1\50"+
    "\1\0\1\50\1\0\1\50\3\46\4\50\1\46\1\0"+
    "\1\50\1\115\1\46\2\50\1\46\2\0\3\50\1\0"+
    "\1\132\26\50\3\0\14\50\1\0\1\117\2\50\1\46"+
    "\1\50\1\0\1\50\1\0\1\50\3\46\4\50\1\46"+
    "\1\0\1\50\1\115\1\46\2\50\1\46\2\0\3\50"+
    "\1\0\3\50\1\133\23\50\3\0\14\50\1\0\1\117"+
    "\2\50\1\46\1\50\1\0\1\50\1\0\1\50\3\46"+
    "\4\50\1\46\1\0\1\50\1\115\1\46\2\50\1\46"+
    "\2\0\3\50\1\0\24\50\1\134\2\50\3\0\14\50"+
    "\1\0\1\117\2\50\1\46\1\50\1\0\1\50\31\0"+
    "\2\135\53\0\1\65\3\0\4\65\2\0\1\65\1\0"+
    "\3\65\3\0\3\65\1\136\27\65\3\0\14\65\2\0"+
    "\2\65\1\0\1\65\1\0\1\65\26\0\1\137\112\0"+
    "\1\140\77\0\1\141\15\0\1\142\106\0\1\143\123\0"+
    "\1\144\50\0\1\145\101\0\1\146\120\0\1\147\70\0"+
    "\1\150\122\0\1\151\104\0\1\152\127\0\1\153\63\0"+
    "\1\154\110\0\1\155\61\0\1\156\104\0\1\157\40\0"+
    "\1\160\47\0\1\161\77\0\1\162\5\0\1\162\76\0"+
    "\1\163\5\0\1\163\117\0\2\164\114\0\2\165\60\0"+
    "\2\166\46\0\1\167\3\46\4\50\1\46\1\0\1\50"+
    "\1\115\1\46\2\50\1\46\2\0\3\167\1\0\27\50"+
    "\3\0\14\50\1\0\1\116\2\50\1\46\1\50\1\0"+
    "\1\50\1\0\1\170\3\0\4\170\2\0\1\170\2\0"+
    "\2\170\3\0\3\170\1\0\27\170\3\0\14\170\2\0"+
    "\2\170\1\0\1\170\1\0\1\170\1\0\1\50\3\46"+
    "\1\50\1\171\2\50\1\46\1\0\1\50\1\115\1\46"+
    "\2\50\1\46\2\0\3\50\1\0\27\50\3\0\14\50"+
    "\1\0\1\117\2\50\1\46\1\50\1\0\1\50\1\0"+
    "\1\121\3\46\4\121\1\46\1\0\1\121\1\0\3\121"+
    "\1\46\2\0\3\121\1\0\27\121\3\0\14\121\1\0"+
    "\1\172\2\121\1\46\1\121\1\0\1\121\1\0\1\122"+
    "\3\46\4\122\1\46\1\0\1\122\1\115\1\121\2\122"+
    "\1\46\2\0\3\122\1\0\27\122\3\0\14\122\1\0"+
    "\1\172\2\122\1\46\1\122\1\0\1\122\1\0\1\173"+
    "\21\0\3\173\2\0\5\173\5\0\2\173\4\0\2\173"+
    "\22\0\1\173\5\0\1\173\3\0\1\50\3\46\4\50"+
    "\1\46\1\0\1\50\1\115\1\46\2\50\1\46\2\0"+
    "\3\50\1\0\3\50\1\174\23\50\3\0\14\50\1\0"+
    "\1\117\2\50\1\46\1\50\1\0\1\50\1\0\1\50"+
    "\3\46\4\50\1\46\1\0\1\50\1\115\1\46\2\50"+
    "\1\46\2\0\3\50\1\0\27\50\3\0\1\50\1\175"+
    "\12\50\1\0\1\117\2\50\1\46\1\50\1\0\1\50"+
    "\1\0\1\50\3\46\4\50\1\46\1\0\1\50\1\115"+
    "\1\46\2\50\1\46\2\0\3\50\1\0\20\50\1\176"+
    "\6\50\3\0\14\50\1\0\1\117\2\50\1\46\1\50"+
    "\1\0\1\50\1\0\1\50\3\46\4\50\1\46\1\0"+
    "\1\50\1\115\1\46\2\50\1\46\2\0\3\50\1\0"+
    "\12\50\1\177\14\50\3\0\14\50\1\0\1\117\2\50"+
    "\1\46\1\50\1\0\1\50\1\0\1\50\3\46\4\50"+
    "\1\46\1\0\1\50\1\115\1\46\2\50\1\46\2\0"+
    "\3\50\1\0\16\50\1\200\10\50\3\0\14\50\1\0"+
    "\1\117\2\50\1\46\1\50\1\0\1\50\1\0\1\50"+
    "\3\46\4\50\1\46\1\0\1\50\1\115\1\46\2\50"+
    "\1\46\2\0\3\50\1\0\12\50\1\201\14\50\3\0"+
    "\14\50\1\0\1\117\2\50\1\46\1\50\1\0\1\50"+
    "\1\0\1\50\3\46\4\50\1\46\1\0\1\50\1\115"+
    "\1\46\2\50\1\46\2\0\3\50\1\0\1\50\1\202"+
    "\25\50\3\0\14\50\1\0\1\117\2\50\1\46\1\50"+
    "\1\0\1\50\1\0\1\50\3\46\4\50\1\46\1\0"+
    "\1\50\1\115\1\46\2\50\1\46\2\0\3\50\1\0"+
    "\20\50\1\203\6\50\3\0\14\50\1\0\1\117\2\50"+
    "\1\46\1\50\1\0\1\50\1\0\1\50\3\46\4\50"+
    "\1\46\1\0\1\50\1\115\1\46\2\50\1\46\2\0"+
    "\3\50\1\0\15\50\1\204\11\50\3\0\14\50\1\0"+
    "\1\117\2\50\1\46\1\50\1\0\1\50\54\0\2\205"+
    "\121\0\1\206\53\0\1\207\116\0\1\210\74\0\1\211"+
    "\100\0\1\212\111\0\1\213\131\0\1\214\77\0\1\215"+
    "\102\0\1\216\51\0\1\217\130\0\1\220\76\0\1\221"+
    "\106\0\1\222\67\0\1\223\101\0\1\224\124\0\1\225"+
    "\64\0\1\226\147\0\1\227\62\0\2\230\71\0\2\231"+
    "\113\0\2\232\107\0\2\233\77\0\2\234\36\0\1\235"+
    "\3\46\4\50\1\46\1\0\1\50\1\115\1\46\2\50"+
    "\1\46\2\0\3\235\1\0\27\50\3\0\14\50\1\0"+
    "\1\116\2\50\1\46\1\50\1\0\1\50\1\0\1\170"+
    "\3\0\4\170\2\0\1\170\1\236\1\0\2\170\3\0"+
    "\3\170\1\0\27\170\3\0\14\170\2\0\2\170\1\0"+
    "\1\170\1\0\1\170\1\0\1\50\3\46\2\50\1\237"+
    "\1\50\1\46\1\0\1\50\1\115\1\46\2\50\1\46"+
    "\2\0\3\50\1\0\27\50\3\0\14\50\1\0\1\117"+
    "\2\50\1\46\1\50\1\0\1\50\1\0\1\240\21\0"+
    "\3\240\2\0\5\240\5\0\2\240\4\0\2\240\22\0"+
    "\1\240\5\0\1\240\3\0\1\50\3\46\4\50\1\46"+
    "\1\0\1\50\1\115\1\46\2\50\1\46\2\0\3\50"+
    "\1\0\27\50\3\0\10\50\1\241\3\50\1\0\1\117"+
    "\2\50\1\46\1\50\1\0\1\50\1\0\1\50\3\46"+
    "\4\50\1\46\1\0\1\50\1\115\1\46\2\50\1\46"+
    "\2\0\3\50\1\0\24\50\1\242\2\50\3\0\14\50"+
    "\1\0\1\117\2\50\1\46\1\50\1\0\1\50\1\0"+
    "\1\50\3\46\4\50\1\46\1\0\1\50\1\115\1\46"+
    "\2\50\1\46\2\0\3\50\1\0\14\50\1\243\12\50"+
    "\3\0\14\50\1\0\1\117\2\50\1\46\1\50\1\0"+
    "\1\50\1\0\1\50\3\46\4\50\1\46\1\0\1\50"+
    "\1\115\1\46\2\50\1\46\2\0\3\50\1\0\16\50"+
    "\1\244\10\50\3\0\14\50\1\0\1\117\2\50\1\46"+
    "\1\50\1\0\1\50\1\0\1\50\3\46\4\50\1\46"+
    "\1\0\1\50\1\115\1\46\2\50\1\46\2\0\3\50"+
    "\1\0\24\50\1\245\2\50\3\0\14\50\1\0\1\117"+
    "\2\50\1\46\1\50\1\0\1\50\1\0\1\50\3\46"+
    "\4\50\1\46\1\0\1\50\1\115\1\46\2\50\1\46"+
    "\2\0\3\50\1\0\24\50\1\246\2\50\3\0\14\50"+
    "\1\0\1\117\2\50\1\46\1\50\1\0\1\50\1\0"+
    "\1\50\3\46\4\50\1\46\1\0\1\50\1\115\1\46"+
    "\2\50\1\46\2\0\3\50\1\0\14\50\1\247\12\50"+
    "\3\0\14\50\1\0\1\117\2\50\1\46\1\50\1\0"+
    "\1\50\1\0\1\50\3\46\4\50\1\46\1\0\1\50"+
    "\1\115\1\46\2\50\1\46\2\0\3\50\1\0\20\50"+
    "\1\250\6\50\3\0\14\50\1\0\1\117\2\50\1\46"+
    "\1\50\1\0\1\50\1\0\1\50\3\46\4\50\1\46"+
    "\1\0\1\50\1\115\1\46\2\50\1\46\2\0\3\50"+
    "\1\0\16\50\1\251\10\50\3\0\14\50\1\0\1\117"+
    "\2\50\1\46\1\50\1\0\1\50\42\0\2\252\100\0"+
    "\1\253\110\0\1\254\110\0\1\255\126\0\1\256\62\0"+
    "\1\257\100\0\1\260\104\0\1\261\73\0\1\262\4\0"+
    "\1\263\120\0\1\264\70\0\1\265\133\0\1\266\55\0"+
    "\1\267\77\0\1\270\121\0\1\271\131\0\1\272\53\0"+
    "\1\273\102\0\1\274\75\0\1\275\124\0\2\276\71\0"+
    "\2\277\105\0\2\300\103\0\2\301\42\0\1\302\3\46"+
    "\4\50\1\46\1\0\1\50\1\115\1\303\2\50\1\46"+
    "\2\0\3\302\1\0\27\50\3\0\14\50\1\0\1\116"+
    "\2\50\1\46\1\50\1\0\1\50\1\0\1\304\3\0"+
    "\21\304\1\0\27\304\3\0\14\304\2\0\2\304\1\0"+
    "\1\304\1\0\1\304\1\0\1\50\3\46\3\50\1\305"+
    "\1\306\1\0\1\50\1\115\1\46\2\50\1\46\2\0"+
    "\3\50\1\0\27\50\3\0\14\50\1\0\1\117\2\50"+
    "\1\46\1\50\1\0\1\50\1\0\1\307\21\0\3\307"+
    "\2\0\5\307\5\0\2\307\4\0\2\307\22\0\1\307"+
    "\5\0\1\307\3\0\1\50\3\46\4\50\1\46\1\0"+
    "\1\50\1\115\1\46\2\50\1\46\2\0\3\50\1\0"+
    "\14\50\1\310\12\50\3\0\14\50\1\0\1\117\2\50"+
    "\1\46\1\50\1\0\1\50\1\0\1\50\3\46\4\50"+
    "\1\46\1\0\1\50\1\115\1\46\2\50\1\46\2\0"+
    "\3\50\1\0\1\311\26\50\3\0\14\50\1\0\1\117"+
    "\2\50\1\46\1\50\1\0\1\50\1\0\1\50\3\46"+
    "\4\50\1\46\1\0\1\50\1\115\1\46\2\50\1\46"+
    "\2\0\3\50\1\0\5\50\1\312\21\50\3\0\14\50"+
    "\1\0\1\117\2\50\1\46\1\50\1\0\1\50\1\0"+
    "\1\50\3\46\4\50\1\46\1\0\1\50\1\115\1\46"+
    "\2\50\1\46\2\0\3\50\1\0\20\50\1\313\6\50"+
    "\3\0\14\50\1\0\1\117\2\50\1\46\1\50\1\0"+
    "\1\50\1\0\1\50\3\46\4\50\1\46\1\0\1\50"+
    "\1\115\1\46\2\50\1\46\2\0\3\50\1\0\27\50"+
    "\3\0\5\50\1\314\6\50\1\0\1\117\2\50\1\46"+
    "\1\50\1\0\1\50\1\0\1\50\3\46\4\50\1\46"+
    "\1\0\1\50\1\115\1\46\2\50\1\46\2\0\3\50"+
    "\1\0\27\50\3\0\14\50\1\0\1\315\2\50\1\46"+
    "\1\50\1\0\1\50\1\0\1\50\3\46\4\50\1\46"+
    "\1\0\1\50\1\115\1\46\2\50\1\46\2\0\3\50"+
    "\1\0\10\50\1\316\16\50\3\0\14\50\1\0\1\117"+
    "\2\50\1\46\1\50\1\0\1\50\1\0\1\50\3\46"+
    "\4\50\1\46\1\0\1\50\1\115\1\46\2\50\1\46"+
    "\2\0\3\50\1\0\3\50\1\317\23\50\3\0\14\50"+
    "\1\0\1\117\2\50\1\46\1\50\1\0\1\50\1\0"+
    "\1\50\3\46\4\50\1\46\1\0\1\50\1\115\1\46"+
    "\2\50\1\46\2\0\3\50\1\0\1\320\26\50\3\0"+
    "\14\50\1\0\1\117\2\50\1\46\1\50\1\0\1\50"+
    "\6\0\1\321\36\0\1\321\65\0\1\322\110\0\1\323"+
    "\104\0\1\324\104\0\1\325\100\0\1\326\104\0\1\327"+
    "\117\0\1\330\61\0\1\331\104\0\1\332\131\0\1\333"+
    "\67\0\1\334\115\0\1\335\73\0\1\336\125\0\1\337"+
    "\64\0\1\340\104\0\1\341\103\0\1\342\110\0\1\343"+
    "\70\0\1\344\74\0\1\345\36\0\1\345\101\0\2\346"+
    "\47\0\1\347\36\0\1\347\40\0\1\302\3\46\4\50"+
    "\1\46\1\0\1\50\1\115\1\46\2\50\1\46\2\0"+
    "\3\302\1\0\27\50\3\0\14\50\1\0\1\116\2\50"+
    "\1\46\1\50\1\0\1\50\1\0\11\46\1\0\1\46"+
    "\1\0\4\46\2\0\1\350\2\46\1\0\27\46\3\0"+
    "\14\46\1\0\1\117\4\46\1\0\1\46\1\0\1\304"+
    "\3\0\21\304\1\0\27\304\3\0\14\304\1\0\1\351"+
    "\2\304\1\0\1\304\1\0\1\304\1\0\1\50\3\46"+
    "\4\50\1\306\1\0\1\50\1\115\1\46\2\50\1\46"+
    "\2\0\3\50\1\0\27\50\3\0\14\50\1\0\1\117"+
    "\2\50\1\46\1\50\1\0\1\50\1\0\11\46\1\352"+
    "\1\46\1\0\4\46\2\0\3\46\1\0\27\46\3\0"+
    "\14\46\1\0\1\117\4\46\1\0\1\46\1\0\1\353"+
    "\21\0\3\353\2\0\5\353\5\0\2\353\4\0\2\353"+
    "\22\0\1\353\5\0\1\353\3\0\1\50\3\46\4\50"+
    "\1\46\1\0\1\50\1\115\1\46\2\50\1\46\2\0"+
    "\3\50\1\0\12\50\1\354\14\50\3\0\14\50\1\0"+
    "\1\117\2\50\1\46\1\50\1\0\1\50\1\0\1\50"+
    "\3\46\4\50\1\46\1\0\1\50\1\115\1\46\2\50"+
    "\1\46\2\0\3\50\1\0\14\50\1\355\12\50\3\0"+
    "\14\50\1\0\1\117\2\50\1\46\1\50\1\0\1\50"+
    "\1\0\1\50\3\46\4\50\1\46\1\0\1\50\1\115"+
    "\1\46\2\50\1\46\2\0\3\50\1\0\27\50\3\0"+
    "\11\50\1\356\2\50\1\0\1\117\2\50\1\46\1\50"+
    "\1\0\1\50\1\0\1\50\3\46\4\50\1\46\1\0"+
    "\1\50\1\115\1\46\2\50\1\46\2\0\3\50\1\0"+
    "\3\50\1\357\23\50\3\0\14\50\1\0\1\117\2\50"+
    "\1\46\1\50\1\0\1\50\1\0\1\50\3\46\4\50"+
    "\1\46\1\0\1\50\1\115\1\46\2\50\1\46\2\0"+
    "\3\50\1\0\10\50\1\360\16\50\3\0\14\50\1\0"+
    "\1\117\2\50\1\46\1\50\1\0\1\50\1\0\1\50"+
    "\3\46\4\50\1\46\1\0\1\50\1\115\1\46\2\50"+
    "\1\46\2\0\3\50\1\0\27\50\3\0\14\50\1\0"+
    "\1\361\2\50\1\46\1\50\1\0\1\50\1\0\1\50"+
    "\3\46\4\50\1\46\1\0\1\50\1\115\1\46\2\50"+
    "\1\46\2\0\3\50\1\0\27\50\3\0\13\50\1\362"+
    "\1\0\1\117\2\50\1\46\1\50\1\0\1\50\1\0"+
    "\1\50\3\46\4\50\1\46\1\0\1\50\1\115\1\46"+
    "\2\50\1\46\2\0\3\50\1\0\27\50\3\0\13\50"+
    "\1\363\1\0\1\117\2\50\1\46\1\50\1\0\1\50"+
    "\46\0\2\364\71\0\1\365\76\0\1\366\125\0\1\367"+
    "\63\0\1\370\145\0\1\371\61\0\1\372\105\0\1\373"+
    "\65\0\1\374\74\0\1\375\125\0\1\376\101\0\1\377"+
    "\76\0\1\u0100\112\0\1\u0101\20\0\1\u0102\65\0\2\u0103"+
    "\55\0\1\u0104\33\0\1\u0104\71\0\2\u0105\53\0\1\u0106"+
    "\10\46\1\0\1\46\1\0\4\46\2\0\3\u0106\1\0"+
    "\27\46\3\0\14\46\1\0\1\117\4\46\1\0\1\46"+
    "\12\0\1\u0107\73\0\1\u0108\21\0\3\u0108\2\0\5\u0108"+
    "\5\0\2\u0108\4\0\2\u0108\22\0\1\u0108\5\0\1\u0108"+
    "\3\0\1\50\3\46\4\50\1\46\1\0\1\50\1\115"+
    "\1\46\2\50\1\46\2\0\3\50\1\0\27\50\3\0"+
    "\14\50\1\0\1\u0109\2\50\1\46\1\50\1\0\1\50"+
    "\1\0\1\50\3\46\4\50\1\46\1\0\1\50\1\115"+
    "\1\46\2\50\1\46\2\0\3\50\1\0\20\50\1\u010a"+
    "\6\50\3\0\14\50\1\0\1\117\2\50\1\46\1\50"+
    "\1\0\1\50\1\0\1\50\3\46\4\50\1\46\1\0"+
    "\1\50\1\115\1\46\2\50\1\46\2\0\3\50\1\0"+
    "\3\50\1\u010b\23\50\3\0\14\50\1\0\1\117\2\50"+
    "\1\46\1\50\1\0\1\50\1\0\1\50\3\46\4\50"+
    "\1\46\1\0\1\50\1\115\1\46\2\50\1\46\2\0"+
    "\3\50\1\0\20\50\1\u010c\6\50\3\0\14\50\1\0"+
    "\1\117\2\50\1\46\1\50\1\0\1\50\1\0\1\50"+
    "\3\46\4\50\1\46\1\0\1\50\1\115\1\46\2\50"+
    "\1\46\2\0\3\50\1\0\27\50\3\0\14\50\1\0"+
    "\1\u010d\2\50\1\46\1\50\1\0\1\50\1\0\1\50"+
    "\3\46\4\50\1\46\1\0\1\50\1\115\1\46\2\50"+
    "\1\46\2\0\3\50\1\0\10\50\1\u010e\16\50\3\0"+
    "\14\50\1\0\1\117\2\50\1\46\1\50\1\0\1\50"+
    "\1\0\1\50\3\46\4\50\1\46\1\0\1\50\1\115"+
    "\1\46\2\50\1\46\2\0\3\50\1\0\1\u010f\26\50"+
    "\3\0\14\50\1\0\1\117\2\50\1\46\1\50\1\0"+
    "\1\50\36\0\2\u0110\74\0\1\u0111\73\0\1\u0112\120\0"+
    "\1\u0113\101\0\1\u0114\107\0\1\u0115\106\0\1\u0116\7\0"+
    "\1\u0117\22\0\1\u0118\33\0\1\u0119\120\0\1\u011a\121\0"+
    "\1\u011b\74\0\1\u011c\55\0\1\u011d\33\0\1\u011d\50\0"+
    "\1\u011e\33\0\1\u011e\41\0\11\46\1\0\1\46\1\0"+
    "\1\u011f\3\46\2\0\3\46\1\0\27\46\3\0\14\46"+
    "\1\0\1\117\4\46\1\0\1\46\1\0\1\u0120\3\0"+
    "\4\u0120\2\0\1\u0120\2\0\2\u0120\3\0\3\u0120\1\0"+
    "\27\u0120\3\0\14\u0120\2\0\2\u0120\1\0\1\u0120\1\0"+
    "\1\u0120\76\0\1\u0121\7\0\1\50\3\46\4\50\1\46"+
    "\1\0\1\50\1\115\1\46\2\50\1\46\2\0\3\50"+
    "\1\0\1\50\1\u0122\25\50\3\0\14\50\1\0\1\117"+
    "\2\50\1\46\1\50\1\0\1\50\1\0\1\50\3\46"+
    "\4\50\1\46\1\0\1\50\1\115\1\46\2\50\1\46"+
    "\2\0\3\50\1\0\27\50\3\0\14\50\1\0\1\u0123"+
    "\2\50\1\46\1\50\1\0\1\50\1\0\1\50\3\46"+
    "\4\50\1\46\1\0\1\50\1\115\1\46\2\50\1\46"+
    "\2\0\3\50\1\0\27\50\3\0\14\50\1\0\1\u0124"+
    "\2\50\1\46\1\50\1\0\1\50\1\0\1\50\3\46"+
    "\4\50\1\46\1\0\1\50\1\115\1\46\2\50\1\46"+
    "\2\0\3\50\1\0\27\50\3\0\14\50\1\0\1\u0125"+
    "\2\50\1\46\1\50\1\0\1\50\1\0\1\50\3\46"+
    "\4\50\1\46\1\0\1\50\1\115\1\46\2\50\1\46"+
    "\2\0\3\50\1\0\5\50\1\u0126\21\50\3\0\14\50"+
    "\1\0\1\117\2\50\1\46\1\50\1\0\1\50\10\0"+
    "\1\u0127\33\0\1\u0127\77\0\1\u0128\101\0\1\u0129\141\0"+
    "\1\u012a\60\0\1\u012b\103\0\1\u012c\77\0\1\u012d\74\0"+
    "\1\u012e\107\0\1\u012f\106\0\1\u0130\20\0\1\u0131\76\0"+
    "\1\u0132\100\0\1\u0133\71\0\1\u0134\55\0\11\46\1\0"+
    "\1\46\1\0\4\46\2\0\2\u0135\1\u0136\1\0\27\46"+
    "\3\0\14\46\1\0\1\117\4\46\1\0\1\46\1\0"+
    "\1\u0120\3\0\4\u0120\2\0\1\u0120\1\115\1\0\2\u0120"+
    "\3\0\3\u0120\1\0\27\u0120\3\0\14\u0120\2\0\2\u0120"+
    "\1\0\1\u0120\1\0\1\u0120\1\0\1\50\3\46\4\50"+
    "\1\46\1\0\1\50\1\115\1\46\2\50\1\46\2\0"+
    "\3\50\1\0\3\50\1\u0137\23\50\3\0\14\50\1\0"+
    "\1\117\2\50\1\46\1\50\1\0\1\50\1\0\1\50"+
    "\3\46\4\50\1\46\1\0\1\50\1\115\1\46\2\50"+
    "\1\46\2\0\3\50\1\0\3\50\1\u0138\23\50\3\0"+
    "\14\50\1\0\1\117\2\50\1\46\1\50\1\0\1\50"+
    "\41\0\1\u0139\102\0\1\u013a\74\0\1\u013b\104\0\1\u013c"+
    "\103\0\1\u013d\133\0\1\u013e\74\0\1\u013f\130\0\1\u0140"+
    "\62\0\1\u0141\74\0\1\u0142\63\0\1\u0143\120\0\1\u0144"+
    "\101\0\1\u0145\56\0\1\u0146\10\46\1\0\1\46\1\0"+
    "\4\46\2\0\3\u0146\1\0\27\46\3\0\14\46\1\0"+
    "\1\117\4\46\1\0\1\46\1\0\11\46\1\0\1\46"+
    "\1\0\4\46\2\0\1\u0146\2\46\1\0\27\46\3\0"+
    "\14\46\1\0\1\117\4\46\1\0\1\46\1\0\1\50"+
    "\3\46\4\50\1\46\1\0\1\50\1\115\1\46\2\50"+
    "\1\46\2\0\3\50\1\0\27\50\3\0\14\50\1\0"+
    "\1\u0147\2\50\1\46\1\50\1\0\1\50\1\0\1\50"+
    "\3\46\4\50\1\46\1\0\1\50\1\115\1\46\2\50"+
    "\1\46\2\0\3\50\1\0\20\50\1\u0148\6\50\3\0"+
    "\14\50\1\0\1\117\2\50\1\46\1\50\1\0\1\50"+
    "\26\0\1\u0149\133\0\1\u014a\70\0\1\u014b\102\0\1\u014c"+
    "\134\0\1\u014d\44\0\1\u014e\104\0\1\u014f\120\0\1\u0150"+
    "\71\0\1\u0151\110\0\1\u0152\32\0\1\u0153\51\0\1\u0154"+
    "\144\0\1\u0155\11\0\11\46\1\0\1\46\1\0\4\46"+
    "\2\0\3\46\1\0\27\46\3\0\14\46\1\0\1\u0156"+
    "\4\46\1\0\1\46\1\0\1\50\3\46\4\50\1\46"+
    "\1\0\1\50\1\115\1\46\2\50\1\46\2\0\3\50"+
    "\1\0\27\50\3\0\14\50\1\0\1\u0157\2\50\1\46"+
    "\1\50\1\0\1\50\67\0\1\u0158\47\0\1\u0159\70\0"+
    "\1\u015a\125\0\1\u015b\104\0\1\u015c\106\0\1\u015d\75\0"+
    "\1\u015e\101\0\1\u015f\114\0\1\u0160\77\0\1\u0161\101\0"+
    "\1\u0162\104\0\1\u0163\114\0\1\u0164\73\0\1\u0165\151\0"+
    "\1\u0166\52\0\1\u0167\61\0\1\u0168\120\0\1\u0169\106\0"+
    "\1\u016a\144\0\1\u016b\65\0\1\u016c\120\0\1\u016d\52\0"+
    "\1\u016e\101\0\1\u016f\111\0\1\u0170\106\0\1\u0171\104\0"+
    "\1\u0172\134\0\1\u0173\37\0\1\u0174\105\0\1\u0175\104\0"+
    "\1\u0176\144\0\1\u0177\44\0\1\u0178\116\0\1\u0179\75\0"+
    "\1\u017a\115\0\1\u017b\112\0\1\u017c\74\0\1\u017d\106\0"+
    "\1\u017e\100\0\1\u017f\101\0\1\u0180\107\0\1\u0181\106\0"+
    "\1\u0182\71\0\1\u0183\112\0\1\u0184\111\0\1\u0185\71\0"+
    "\1\u0186\123\0\1\u0187\110\0\1\u0188\74\0\1\u0189\75\0"+
    "\1\u018a\113\0\1\u018b\75\0\1\u018c\101\0\1\u018d\122\0"+
    "\1\u018e\102\0\1\u018f\67\0\1\u0190\104\0\1\u0191\112\0"+
    "\1\u0192\113\0\1\u0193\67\0\1\u0194\115\0\1\u0195\110\0"+
    "\1\u0196\67\0\1\u0197\105\0\1\u0198\116\0\1\u0199\104\0"+
    "\1\u019a\71\0\1\u019b\115\0\1\u019c\112\0\1\u019d\65\0"+
    "\1\u019e\117\0\1\u019f\106\0\1\u01a0\67\0\1\u01a1\104\0"+
    "\1\u01a2\56\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[25254];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\2\1\1\11\4\1\3\11"+
    "\2\1\75\0\2\11\16\0\2\11\32\0\1\11\41\0"+
    "\1\11\42\0\1\1\1\11\14\0\1\11\4\0\1\11"+
    "\3\0\2\11\4\0\1\11\1\0\1\11\3\0\1\11"+
    "\6\0\1\11\7\0\1\11\4\0\1\11\1\0\1\11"+
    "\3\0\1\11\3\0\1\11\2\0\1\1\1\11\1\1"+
    "\3\0\1\11\3\0\1\11\2\0\1\1\14\0\2\11"+
    "\2\0\1\11\1\0\3\11\1\0\1\11\25\0\1\11"+
    "\11\0\1\11\1\0\1\11\14\0\2\11\15\0\1\11"+
    "\16\0\1\11\16\0\1\11\2\0\1\11\11\0\2\11"+
    "\2\0\1\11\2\0\1\11\3\0\1\11\2\0\1\11"+
    "\2\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[418];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */

public String extraerInfo (String token){
    int longitud = token.length();
    String tokenSinCorchetes = token.substring(1, longitud-1);
    System.out.println("El token a enviar es: "+tokenSinCorchetes);
    return tokenSinCorchetes;
}



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Analizador_Lexico_XML(java.io.Reader in) {
    this.zzReader = in;
  }



  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(Simbolos.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.println("Se reconocio el error lexico: "+yytext()); return new Symbol(Simbolos.ErrorLexico, yycolumn, yyline, yytext());
            }
          case 59: break;
          case 2: 
            { /*Se Ingnora*/
            }
          case 60: break;
          case 3: 
            { /*Se ignora*/
            }
          case 61: break;
          case 4: 
            { System.out.println("Se reconocio "+yytext()+" de tipo Diagonal"); return new Symbol(Simbolos.Diagonal, yycolumn, yyline, yytext());
            }
          case 62: break;
          case 5: 
            { System.out.println("Se reconocio "+yytext()+" de Igual"); return new Symbol(Simbolos.Igual, yycolumn, yyline, yytext());
            }
          case 63: break;
          case 6: 
            { System.out.println("Se reconocio "+yytext()+" de tipo Menor Que"); return new Symbol(Simbolos.MenorQue, yycolumn, yyline, yytext());
            }
          case 64: break;
          case 7: 
            { System.out.println("Se reconocio "+yytext()+" de tipo Mayor Que"); return new Symbol(Simbolos.MayorQue, yycolumn, yyline, yytext());
            }
          case 65: break;
          case 8: 
            { System.out.println("Se reconocio "+yytext()+" de tipo Entero"); return new Symbol(Simbolos.Entero, yycolumn, yyline, extraerInfo(yytext()));
            }
          case 66: break;
          case 9: 
            { System.out.println("Se reconocio "+yytext()+" de tipo Valor Parametro"); return new Symbol(Simbolos.ValorParametro, yycolumn, yyline, extraerInfo(yytext()));
            }
          case 67: break;
          case 10: 
            { System.out.println("Se reconocio "+yytext()+" de tipo Dato entre comillas"); return new Symbol(Simbolos.DatoEntreComillas, yycolumn, yyline, extraerInfo(yytext()));
            }
          case 68: break;
          case 11: 
            { System.out.println("Se reconocio "+yytext()+" de tipo Id"); return new Symbol(Simbolos.Id, yycolumn, yyline, yytext());
            }
          case 69: break;
          case 12: 
            { System.out.println("Se reconocio "+yytext()+" de tipo Identificador"); return new Symbol(Simbolos.Identificador, yycolumn, yyline, extraerInfo(yytext()));
            }
          case 70: break;
          case 13: 
            { System.out.println("Se reconocio "+yytext()+" de tipo Valor"); return new Symbol(Simbolos.Valor, yycolumn, yyline, yytext());
            }
          case 71: break;
          case 14: 
            { System.out.println("Se reconocio "+yytext()+" de tipo Accion"); return new Symbol(Simbolos.Accion, yycolumn, yyline, yytext());
            }
          case 72: break;
          case 15: 
            { System.out.println("Se reconocio "+yytext()+" de tipo Nombre"); return new Symbol(Simbolos.Nombre, yycolumn, yyline, yytext());
            }
          case 73: break;
          case 16: 
            { System.out.println("Se reconocio "+yytext()+" de tipo MENU Componente"); return new Symbol(Simbolos.MenuComponente, yycolumn, yyline, extraerInfo(yytext()));
            }
          case 74: break;
          case 17: 
            { System.out.println("Se reconocio "+yytext()+" de tipo ANCHO"); return new Symbol(Simbolos.Ancho, yycolumn, yyline, yytext());
            }
          case 75: break;
          case 18: 
            { System.out.println("Se reconocio "+yytext()+" de tipo COLOR"); return new Symbol(Simbolos.Color, yycolumn, yyline, yytext());
            }
          case 76: break;
          case 19: 
            { System.out.println("Se reconocio "+yytext()+" de tipo Clase"); return new Symbol(Simbolos.Clase, yycolumn, yyline, yytext());
            }
          case 77: break;
          case 20: 
            { System.out.println("Se reconocio "+yytext()+" de tipo Sitio"); return new Symbol(Simbolos.Sitio, yycolumn, yyline, yytext());
            }
          case 78: break;
          case 21: 
            { System.out.println("Se reconocio "+yytext()+" de tipo TEXTO"); return new Symbol(Simbolos.Texto, yycolumn, yyline, yytext());
            }
          case 79: break;
          case 22: 
            { System.out.println("Se reconocio "+yytext()+" de tipo Padre"); return new Symbol(Simbolos.Padre, yycolumn, yyline, yytext());
            }
          case 80: break;
          case 23: 
            { System.out.println("Se reconocio "+yytext()+" de tipo URL"); return new Symbol(Simbolos.URL, yycolumn, yyline, extraerInfo(yytext()));
            }
          case 81: break;
          case 24: 
            { System.out.println("Se reconocio "+yytext()+" de tipo VIDEO Componente"); return new Symbol(Simbolos.VideoComponente, yycolumn, yyline, extraerInfo(yytext()));
            }
          case 82: break;
          case 25: 
            { System.out.println("Se reconocio "+yytext()+" de tipo ALTURA"); return new Symbol(Simbolos.Altura, yycolumn, yyline, yytext());
            }
          case 83: break;
          case 26: 
            { System.out.println("Se reconocio "+yytext()+" de tipo ORIGEN"); return new Symbol(Simbolos.Origen, yycolumn, yyline, yytext());
            }
          case 84: break;
          case 27: 
            { System.out.println("Se reconocio "+yytext()+" de tipo Titulo"); return new Symbol(Simbolos.Titulo, yycolumn, yyline, yytext());
            }
          case 85: break;
          case 28: 
            { System.out.println("Se reconocio "+yytext()+" de tipo Pagina"); return new Symbol(Simbolos.Pagina, yycolumn, yyline, yytext());
            }
          case 86: break;
          case 29: 
            { System.out.println("Se reconocio "+yytext()+" de tipo Atributo"); return new Symbol(Simbolos.Atributo, yycolumn, yyline, yytext());
            }
          case 87: break;
          case 30: 
            { System.out.println("Se reconocio "+yytext()+" de tipo Acciones"); return new Symbol(Simbolos.Acciones, yycolumn, yyline, yytext());
            }
          case 88: break;
          case 31: 
            { System.out.println("Se reconocio "+yytext()+" de tipo Etiqueta"); return new Symbol(Simbolos.Etiqueta, yycolumn, yyline, yytext());
            }
          case 89: break;
          case 32: 
            { System.out.println("Se reconocio "+yytext()+" de tipo IMAGEN componente"); return new Symbol(Simbolos.ImagenComponente, yycolumn, yyline, extraerInfo(yytext()));
            }
          case 90: break;
          case 33: 
            { System.out.println("Se reconocio "+yytext()+" de tipo TITULO componente"); return new Symbol(Simbolos.TituloComponente, yycolumn, yyline, extraerInfo(yytext()));
            }
          case 91: break;
          case 34: 
            { System.out.println("Se reconocio "+yytext()+" de tipo Parametro"); return new Symbol(Simbolos.Parametro, yycolumn, yyline, yytext());
            }
          case 92: break;
          case 35: 
            { System.out.println("Se reconocio "+yytext()+" de tipo Atributos"); return new Symbol(Simbolos.Atributos, yycolumn, yyline, yytext());
            }
          case 93: break;
          case 36: 
            { System.out.println("Se reconocio "+yytext()+" de tipo Etiquetas"); return new Symbol(Simbolos.Etiquetas, yycolumn, yyline, yytext());
            }
          case 94: break;
          case 37: 
            { System.out.println("Se reconocio "+yytext()+" de tipo Color de Texto"); return new Symbol(Simbolos.TextColor, yycolumn, yyline, extraerInfo(yytext()));
            }
          case 95: break;
          case 38: 
            { System.out.println("Se reconocio "+yytext()+" de tipo Derecha"); return new Symbol(Simbolos.Derecha, yycolumn, yyline, extraerInfo(yytext()));
            }
          case 96: break;
          case 39: 
            { System.out.println("Se reconocio "+yytext()+" de tipo Centrar"); return new Symbol(Simbolos.Centrar, yycolumn, yyline, extraerInfo(yytext()));
            }
          case 97: break;
          case 40: 
            { System.out.println("Se reconocio "+yytext()+" de tipo PARRAFO componente"); return new Symbol(Simbolos.ParrafoComponente, yycolumn, yyline, extraerInfo(yytext()));
            }
          case 98: break;
          case 41: 
            { System.out.println("Se reconocio "+yytext()+" de tipo Parametros"); return new Symbol(Simbolos.Parametros, yycolumn, yyline, yytext());
            }
          case 99: break;
          case 42: 
            { System.out.println("Se reconocio "+yytext()+" de tipo ETIQUETAS"); return new Symbol(Simbolos.AtributoEtiquetas, yycolumn, yyline, yytext());
            }
          case 100: break;
          case 43: 
            { System.out.println("Se reconocio "+yytext()+" de tipo Izquierda"); return new Symbol(Simbolos.Izquierda, yycolumn, yyline, extraerInfo(yytext()));
            }
          case 101: break;
          case 44: 
            { System.out.println("Se reconocio "+yytext()+" de tipo ALINEACION"); return new Symbol(Simbolos.Alineacion, yycolumn, yyline, yytext());
            }
          case 102: break;
          case 45: 
            { System.out.println("Se reconocio "+yytext()+" de tipo Fecha"); return new Symbol(Simbolos.Fecha, yycolumn, yyline, extraerInfo(yytext()));
            }
          case 103: break;
          case 46: 
            { System.out.println("Se reconocio "+yytext()+" de tipo Justificar"); return new Symbol(Simbolos.Justificar, yycolumn, yyline, extraerInfo(yytext()));
            }
          case 104: break;
          case 47: 
            { System.out.println("Se reconocio "+yytext()+" de tipo Nueva Pagina"); return new Symbol(Simbolos.NuevaPagina, yycolumn, yyline, yytext());
            }
          case 105: break;
          case 48: 
            { System.out.println("Se reconocio "+yytext()+" de tipo Borrar Pagina"); return new Symbol(Simbolos.BorrarPagina, yycolumn, yyline, yytext());
            }
          case 106: break;
          case 49: 
            { System.out.println("Se reconocio "+yytext()+" de tipo Fecha Creacion"); return new Symbol(Simbolos.FechaCreacion, yycolumn, yyline, yytext());
            }
          case 107: break;
          case 50: 
            { System.out.println("Se reconocio "+yytext()+" de tipo Nuevo Sitio Web"); return new Symbol(Simbolos.NuevoSitioWeb, yycolumn, yyline, yytext());
            }
          case 108: break;
          case 51: 
            { System.out.println("Se reconocio "+yytext()+" de tipo Borrar Sitio Web"); return new Symbol(Simbolos.BorrarSitioWeb, yycolumn, yyline, yytext());
            }
          case 109: break;
          case 52: 
            { System.out.println("Se reconocio "+yytext()+" de tipo Usuario Creacion"); return new Symbol(Simbolos.UsuarioCreacion, yycolumn, yyline, yytext());
            }
          case 110: break;
          case 53: 
            { System.out.println("Se reconocio "+yytext()+" de tipo Modificar Pagina"); return new Symbol(Simbolos.ModificarPagina, yycolumn, yyline, yytext());
            }
          case 111: break;
          case 54: 
            { System.out.println("Se reconocio "+yytext()+" de tipo Borrar Componente"); return new Symbol(Simbolos.BorrarComponente, yycolumn, yyline, yytext());
            }
          case 112: break;
          case 55: 
            { System.out.println("Se reconocio "+yytext()+" de tipo Agregar Componente"); return new Symbol(Simbolos.AgregarComponente, yycolumn, yyline, yytext());
            }
          case 113: break;
          case 56: 
            { System.out.println("Se reconocio "+yytext()+" de tipo Fecha Modificacion"); return new Symbol(Simbolos.FechaModificacion, yycolumn, yyline, yytext());
            }
          case 114: break;
          case 57: 
            { System.out.println("Se reconocio "+yytext()+" de tipo Usuario Modificacion"); return new Symbol(Simbolos.UsuarioModificacion, yycolumn, yyline, yytext());
            }
          case 115: break;
          case 58: 
            { System.out.println("Se reconocio "+yytext()+" de tipo Modificar Componente"); return new Symbol(Simbolos.ModificarComponente, yycolumn, yyline, yytext());
            }
          case 116: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
