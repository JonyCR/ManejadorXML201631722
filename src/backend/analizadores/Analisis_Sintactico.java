
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Apr 07 18:51:05 CST 2019
//----------------------------------------------------

package backend.analizadores;

import backend.objetos.*;
import java_cup.runtime.Symbol;
import java.util.ArrayList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Apr 07 18:51:05 CST 2019
  */
public class Analisis_Sintactico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Analisis_Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  public Analisis_Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Analisis_Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\140\000\002\002\004\000\002\002\003\000\002\027" +
    "\012\000\002\027\003\000\002\030\003\000\002\030\004" +
    "\000\002\011\003\000\002\011\003\000\002\011\003\000" +
    "\002\011\003\000\002\011\003\000\002\011\003\000\002" +
    "\011\003\000\002\011\003\000\002\004\015\000\002\024" +
    "\012\000\002\032\013\000\002\032\014\000\002\031\005" +
    "\000\002\031\005\000\002\031\005\000\002\031\005\000" +
    "\002\031\005\000\002\005\015\000\002\033\012\000\002" +
    "\034\015\000\002\006\015\000\002\035\012\000\002\036" +
    "\015\000\002\003\016\000\002\003\015\000\002\013\012" +
    "\000\002\015\003\000\002\015\004\000\002\016\013\000" +
    "\002\014\012\000\002\017\003\000\002\017\004\000\002" +
    "\020\011\000\002\012\005\000\002\012\005\000\002\012" +
    "\005\000\002\012\005\000\002\012\005\000\002\012\005" +
    "\000\002\012\005\000\002\012\005\000\002\042\012\000" +
    "\002\043\013\000\002\043\014\000\002\044\005\000\002" +
    "\044\005\000\002\044\005\000\002\044\005\000\002\044" +
    "\005\000\002\044\005\000\002\044\005\000\002\044\004" +
    "\000\002\045\003\000\002\045\003\000\002\045\003\000" +
    "\002\045\003\000\002\007\015\000\002\037\012\000\002" +
    "\041\030\000\002\010\015\000\002\025\013\000\002\021" +
    "\013\000\002\021\014\000\002\022\005\000\002\022\005" +
    "\000\002\022\005\000\002\023\003\000\002\023\003\000" +
    "\002\023\003\000\002\023\003\000\002\023\003\000\002" +
    "\047\012\000\002\050\013\000\002\050\014\000\002\051" +
    "\005\000\002\051\005\000\002\051\005\000\002\051\005" +
    "\000\002\051\005\000\002\051\005\000\002\051\005\000" +
    "\002\051\004\000\002\052\003\000\002\052\003\000\002" +
    "\052\003\000\002\052\003\000\002\046\015\000\002\026" +
    "\016\000\002\026\015\000\002\040\037" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u017d\000\004\024\011\001\002\000\004\002\000\001" +
    "\002\000\006\002\ufff8\024\ufff8\001\002\000\006\002\ufff4" +
    "\024\ufff4\001\002\000\006\002\ufff5\024\ufff5\001\002\000" +
    "\006\002\ufffb\024\ufffb\001\002\000\006\011\021\017\022" +
    "\001\002\000\006\002\ufffa\024\ufffa\001\002\000\006\002" +
    "\ufff6\024\ufff6\001\002\000\004\002\ufffe\001\002\000\006" +
    "\002\ufff9\024\ufff9\001\002\000\004\002\020\001\002\000" +
    "\006\002\ufff7\024\ufff7\001\002\000\004\002\001\001\002" +
    "\000\004\022\034\001\002\000\004\035\023\001\002\000" +
    "\004\024\024\001\002\000\004\011\021\001\002\000\004" +
    "\024\ufffd\001\002\000\004\024\027\001\002\000\006\011" +
    "\021\034\031\001\002\000\004\024\ufffc\001\002\000\004" +
    "\017\032\001\002\000\004\035\033\001\002\000\004\002" +
    "\uffff\001\002\000\004\023\035\001\002\000\022\045\037" +
    "\051\040\055\044\056\041\057\036\060\045\063\042\064" +
    "\043\001\002\000\004\035\u0167\001\002\000\004\035\u0139" +
    "\001\002\000\004\035\u0133\001\002\000\004\035\375\001" +
    "\002\000\004\035\233\001\002\000\004\035\143\001\002" +
    "\000\004\035\112\001\002\000\004\035\046\001\002\000" +
    "\004\024\047\001\002\000\004\041\055\001\002\000\004" +
    "\024\051\001\002\000\004\034\052\001\002\000\004\011" +
    "\053\001\002\000\004\035\054\001\002\000\006\002\uffc3" +
    "\024\uffc3\001\002\000\004\035\056\001\002\000\004\024" +
    "\057\001\002\000\004\040\065\001\002\000\004\024\061" +
    "\001\002\000\004\034\062\001\002\000\004\041\063\001" +
    "\002\000\004\035\064\001\002\000\004\024\uffc2\001\002" +
    "\000\004\022\066\001\002\000\004\023\067\001\002\000" +
    "\004\006\070\001\002\000\004\035\071\001\002\000\004" +
    "\004\072\001\002\000\004\024\073\001\002\000\004\034" +
    "\074\001\002\000\004\040\075\001\002\000\004\035\076" +
    "\001\002\000\004\024\077\001\002\000\004\040\100\001" +
    "\002\000\004\022\101\001\002\000\004\023\102\001\002" +
    "\000\004\066\103\001\002\000\004\035\104\001\002\000" +
    "\004\004\105\001\002\000\004\024\106\001\002\000\004" +
    "\034\107\001\002\000\004\040\110\001\002\000\004\035" +
    "\111\001\002\000\004\024\uffc1\001\002\000\004\024\114" +
    "\001\002\000\004\024\137\001\002\000\004\041\115\001" +
    "\002\000\004\035\116\001\002\000\004\024\120\001\002" +
    "\000\004\024\133\001\002\000\004\040\121\001\002\000" +
    "\004\022\122\001\002\000\004\023\123\001\002\000\004" +
    "\006\124\001\002\000\004\035\125\001\002\000\004\004" +
    "\126\001\002\000\004\024\127\001\002\000\004\034\130" +
    "\001\002\000\004\040\131\001\002\000\004\035\132\001" +
    "\002\000\004\024\uffe8\001\002\000\004\034\134\001\002" +
    "\000\004\041\135\001\002\000\004\035\136\001\002\000" +
    "\004\024\uffe9\001\002\000\004\034\140\001\002\000\004" +
    "\011\141\001\002\000\004\035\142\001\002\000\006\002" +
    "\uffea\024\uffea\001\002\000\004\024\145\001\002\000\004" +
    "\024\203\001\002\000\004\041\146\001\002\000\004\035" +
    "\147\001\002\000\004\024\150\001\002\000\004\040\151" +
    "\001\002\000\004\022\152\001\002\000\004\023\153\001" +
    "\002\000\004\006\154\001\002\000\004\035\155\001\002" +
    "\000\004\004\156\001\002\000\004\024\157\001\002\000" +
    "\004\034\160\001\002\000\004\040\161\001\002\000\004" +
    "\035\162\001\002\000\004\024\163\001\002\000\004\040" +
    "\164\001\002\000\004\022\165\001\002\000\004\023\166" +
    "\001\002\000\004\065\167\001\002\000\004\035\170\001" +
    "\002\000\004\042\171\001\002\000\004\024\172\001\002" +
    "\000\004\034\173\001\002\000\004\040\174\001\002\000" +
    "\004\035\175\001\002\000\004\024\176\001\002\000\004" +
    "\034\177\001\002\000\004\041\200\001\002\000\004\035" +
    "\201\001\002\000\004\024\uffa2\001\002\000\004\024\227" +
    "\001\002\000\006\034\204\036\205\001\002\000\004\011" +
    "\225\001\002\000\004\035\206\001\002\000\004\024\210" +
    "\001\002\000\004\024\220\001\002\000\004\005\212\001" +
    "\002\000\004\024\uffdd\001\002\000\004\037\213\001\002" +
    "\000\004\023\214\001\002\000\004\012\215\001\002\000" +
    "\004\034\216\001\002\000\004\035\217\001\002\000\004" +
    "\024\uffdb\001\002\000\006\005\212\034\222\001\002\000" +
    "\004\024\uffdc\001\002\000\004\036\223\001\002\000\004" +
    "\035\224\001\002\000\004\024\uffde\001\002\000\004\035" +
    "\226\001\002\000\006\002\uffa3\024\uffa3\001\002\000\004" +
    "\034\230\001\002\000\004\011\231\001\002\000\004\035" +
    "\232\001\002\000\006\002\uffa4\024\uffa4\001\002\000\004" +
    "\024\235\001\002\000\004\024\371\001\002\000\004\041" +
    "\236\001\002\000\004\035\237\001\002\000\004\024\241" +
    "\001\002\000\004\024\270\001\002\000\004\040\242\001" +
    "\002\000\004\022\243\001\002\000\004\023\244\001\002" +
    "\000\010\006\245\066\247\071\246\001\002\000\004\035" +
    "\266\001\002\000\004\035\257\001\002\000\004\035\255" +
    "\001\002\000\004\024\251\001\002\000\004\034\252\001" +
    "\002\000\004\040\253\001\002\000\004\035\254\001\002" +
    "\000\004\024\uffbe\001\002\000\004\004\256\001\002\000" +
    "\004\024\uffbb\001\002\000\014\016\263\033\265\044\260" +
    "\062\264\073\262\001\002\000\004\024\uffb8\001\002\000" +
    "\004\024\uffba\001\002\000\004\024\uffb6\001\002\000\004" +
    "\024\uffb9\001\002\000\004\024\uffb5\001\002\000\004\024" +
    "\uffb7\001\002\000\004\004\267\001\002\000\004\024\uffbc" +
    "\001\002\000\006\034\271\040\272\001\002\000\004\041" +
    "\302\001\002\000\004\022\273\001\002\000\004\023\274" +
    "\001\002\000\010\006\245\066\247\071\246\001\002\000" +
    "\004\024\276\001\002\000\004\034\277\001\002\000\004" +
    "\040\300\001\002\000\004\035\301\001\002\000\004\024" +
    "\uffbd\001\002\000\004\035\303\001\002\000\004\024\305" +
    "\001\002\000\004\024\uffbf\001\002\000\004\021\306\001" +
    "\002\000\004\035\307\001\002\000\004\024\311\001\002" +
    "\000\004\024\355\001\002\000\004\020\312\001\002\000" +
    "\004\022\313\001\002\000\004\023\314\001\002\000\022" +
    "\013\320\014\317\015\315\027\324\030\323\043\316\053" +
    "\322\070\321\001\002\000\004\035\353\001\002\000\004" +
    "\035\352\001\002\000\004\035\350\001\002\000\004\035" +
    "\346\001\002\000\004\035\344\001\002\000\004\035\336" +
    "\001\002\000\004\035\334\001\002\000\004\035\332\001" +
    "\002\000\004\024\326\001\002\000\004\034\327\001\002" +
    "\000\004\020\330\001\002\000\004\035\331\001\002\000" +
    "\004\024\uffb3\001\002\000\004\072\333\001\002\000\004" +
    "\024\uffad\001\002\000\004\026\335\001\002\000\004\024" +
    "\uffae\001\002\000\012\031\337\032\340\052\341\061\343" +
    "\001\002\000\004\024\uffa7\001\002\000\004\024\uffa9\001" +
    "\002\000\004\024\uffa8\001\002\000\004\024\uffb0\001\002" +
    "\000\004\024\uffa6\001\002\000\004\004\345\001\002\000" +
    "\004\024\uffab\001\002\000\004\042\347\001\002\000\004" +
    "\024\uffb1\001\002\000\004\072\351\001\002\000\004\024" +
    "\uffac\001\002\000\004\024\uffaa\001\002\000\004\007\354" +
    "\001\002\000\004\024\uffaf\001\002\000\006\020\356\034" +
    "\357\001\002\000\004\022\362\001\002\000\004\021\360" +
    "\001\002\000\004\035\361\001\002\000\004\024\uffb4\001" +
    "\002\000\004\023\363\001\002\000\022\013\320\014\317" +
    "\015\315\027\324\030\323\043\316\053\322\070\321\001" +
    "\002\000\004\024\365\001\002\000\004\034\366\001\002" +
    "\000\004\020\367\001\002\000\004\035\370\001\002\000" +
    "\004\024\uffb2\001\002\000\004\034\372\001\002\000\004" +
    "\011\373\001\002\000\004\035\374\001\002\000\006\002" +
    "\uffc0\024\uffc0\001\002\000\004\024\377\001\002\000\004" +
    "\024\u012b\001\002\000\004\041\u0100\001\002\000\004\035" +
    "\u0101\001\002\000\004\024\u0103\001\002\000\004\024\u0125" +
    "\001\002\000\004\040\u0105\001\002\000\004\024\uffe1\001" +
    "\002\000\004\022\u0106\001\002\000\004\023\u0107\001\002" +
    "\000\022\006\u010b\046\u0108\047\u0109\050\u010d\054\u010c\065" +
    "\u010f\067\u010a\070\u010e\001\002\000\004\035\u0123\001\002" +
    "\000\004\035\u0121\001\002\000\004\035\u011f\001\002\000" +
    "\004\035\u011d\001\002\000\004\035\u011b\001\002\000\004" +
    "\035\u0119\001\002\000\004\035\u0117\001\002\000\004\035" +
    "\u0115\001\002\000\004\024\u0111\001\002\000\004\034\u0112" +
    "\001\002\000\004\040\u0113\001\002\000\004\035\u0114\001" +
    "\002\000\004\024\uffdf\001\002\000\004\042\u0116\001\002" +
    "\000\004\024\uffd7\001\002\000\004\004\u0118\001\002\000" +
    "\004\024\uffd8\001\002\000\004\025\u011a\001\002\000\004" +
    "\024\uffd4\001\002\000\004\004\u011c\001\002\000\004\024" +
    "\uffd3\001\002\000\004\004\u011e\001\002\000\004\024\uffda" +
    "\001\002\000\004\004\u0120\001\002\000\004\024\uffd9\001" +
    "\002\000\004\025\u0122\001\002\000\004\024\uffd5\001\002" +
    "\000\004\004\u0124\001\002\000\004\024\uffd6\001\002\000" +
    "\006\034\u0127\040\u0105\001\002\000\004\024\uffe0\001\002" +
    "\000\004\041\u0128\001\002\000\004\035\u0129\001\002\000" +
    "\004\024\uffe2\001\002\000\004\024\u012f\001\002\000\006" +
    "\034\u012c\036\205\001\002\000\004\011\u012d\001\002\000" +
    "\004\035\u012e\001\002\000\006\002\uffe3\024\uffe3\001\002" +
    "\000\004\034\u0130\001\002\000\004\011\u0131\001\002\000" +
    "\004\035\u0132\001\002\000\006\002\uffe4\024\uffe4\001\002" +
    "\000\004\024\235\001\002\000\004\024\u0135\001\002\000" +
    "\004\034\u0136\001\002\000\004\011\u0137\001\002\000\004" +
    "\035\u0138\001\002\000\006\002\uffa5\024\uffa5\001\002\000" +
    "\004\024\u013a\001\002\000\004\041\u0140\001\002\000\004" +
    "\024\u013c\001\002\000\004\034\u013d\001\002\000\004\011" +
    "\u013e\001\002\000\004\035\u013f\001\002\000\006\002\ufff3" +
    "\024\ufff3\001\002\000\004\035\u0141\001\002\000\004\024" +
    "\u0143\001\002\000\004\024\u015b\001\002\000\004\040\u0144" +
    "\001\002\000\004\022\u0145\001\002\000\004\023\u0146\001" +
    "\002\000\014\006\u0148\046\u014b\047\u0147\050\u014c\054\u0149" +
    "\001\002\000\004\035\u0159\001\002\000\004\035\u0157\001" +
    "\002\000\004\035\u0155\001\002\000\004\024\u0151\001\002" +
    "\000\004\035\u014f\001\002\000\004\035\u014d\001\002\000" +
    "\004\025\u014e\001\002\000\004\024\uffec\001\002\000\004" +
    "\004\u0150\001\002\000\004\024\uffee\001\002\000\004\034" +
    "\u0152\001\002\000\004\040\u0153\001\002\000\004\035\u0154" +
    "\001\002\000\004\024\ufff1\001\002\000\004\004\u0156\001" +
    "\002\000\004\024\uffeb\001\002\000\004\004\u0158\001\002" +
    "\000\004\024\uffef\001\002\000\004\025\u015a\001\002\000" +
    "\004\024\uffed\001\002\000\006\034\u015d\040\u015c\001\002" +
    "\000\004\022\u0160\001\002\000\004\041\u015e\001\002\000" +
    "\004\035\u015f\001\002\000\004\024\ufff2\001\002\000\004" +
    "\023\u0161\001\002\000\014\006\u0148\046\u014b\047\u0147\050" +
    "\u014c\054\u0149\001\002\000\004\024\u0163\001\002\000\004" +
    "\034\u0164\001\002\000\004\040\u0165\001\002\000\004\035" +
    "\u0166\001\002\000\004\024\ufff0\001\002\000\004\024\u0169" +
    "\001\002\000\004\024\u017c\001\002\000\004\041\u016a\001" +
    "\002\000\004\035\u016b\001\002\000\004\024\u016c\001\002" +
    "\000\004\040\u0172\001\002\000\004\024\u016e\001\002\000" +
    "\004\034\u016f\001\002\000\004\041\u0170\001\002\000\004" +
    "\035\u0171\001\002\000\004\024\uffe6\001\002\000\004\022" +
    "\u0173\001\002\000\004\023\u0174\001\002\000\004\006\u0175" +
    "\001\002\000\004\035\u0176\001\002\000\004\004\u0177\001" +
    "\002\000\004\024\u0178\001\002\000\004\034\u0179\001\002" +
    "\000\004\040\u017a\001\002\000\004\035\u017b\001\002\000" +
    "\004\024\uffe5\001\002\000\004\034\u017d\001\002\000\004" +
    "\011\u017e\001\002\000\004\035\u017f\001\002\000\006\002" +
    "\uffe7\024\uffe7\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u017d\000\030\002\015\003\007\004\011\005\014\006" +
    "\004\007\016\010\012\011\013\026\006\027\003\046\005" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\003" +
    "\007\004\011\005\014\006\004\007\016\010\012\011\024" +
    "\026\006\030\025\046\005\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\003\007\004\011\005\014\006\004" +
    "\007\016\010\012\011\027\026\006\046\005\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\037\047\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\041\057\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\033\112\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\034\116\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\040\143\001\001\000\004\014\201\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\017\206\020\210\001\001\000\004\020\220\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\025\233\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\021\237\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\022\247\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\023\260\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\022\274" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\047\303\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\050\307\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\051\324\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\052" +
    "\341\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\051\363\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\375\001" +
    "\001\000\004\014\u0129\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\015\u0101\016\u0103\001\001\000\004\016" +
    "\u0125\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\u010f\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\025\u0133\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\024\u013a\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\032" +
    "\u0141\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\031\u0149\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\031\u0161\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\035\u0167\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\036\u016c\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Analisis_Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Analisis_Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Analisis_Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public ManejadorServidor manejador;
    
    public Analisis_Sintactico(Analizador_Lexico_XML lex, ManejadorServidor manejador) { 
            super(lex);
            this.manejador=manejador;
    }

    public String resultado="";

    //Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s)
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        System.out.println("¡ Error Sintactico Recuperado !");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);      
    }

    //Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {        
        String lexema = s.value.toString();
        int fila = s.right +1;
        int columna = s.left +1;
        
        System.out.println("¡ Error Sintactico, Modo Panico ! ");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);

        ErrorJ errorEcontrado = new ErrorJ(lexema, "Error sintactico", fila, columna);
        manejador.capturarErrores(errorEcontrado);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Analisis_Sintactico$actions {



  private final Analisis_Sintactico parser;

  /** Constructor */
  CUP$Analisis_Sintactico$actions(Analisis_Sintactico parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Analisis_Sintactico$do_action(
    int                        CUP$Analisis_Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Analisis_Sintactico$parser,
    java.util.Stack            CUP$Analisis_Sintactico$stack,
    int                        CUP$Analisis_Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Analisis_Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Analisis_Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // XRS ::= MenorQue Parametros MayorQue MenorQue Parametro Nombre Igual Id MayorQue Identificador MenorQue Diagonal Parametro MayorQue MenorQue Parametro Nombre Igual Titulo MayorQue ValorParametro MenorQue Diagonal Parametro MayorQue MenorQue Diagonal Parametros MayorQue 
            {
              String RESULT =null;
		 System.out.printf("XS --> XP1 XP2 P3\n\n"); 
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("XRS",30, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-28)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // estructuraModificarPagina ::= MenorQue Accion Nombre Igual ModificarPagina MayorQue XRS MenorQue Diagonal Accion MayorQue 
            {
              String RESULT =null;
		 System.out.printf("s1 --> XS\n\n"); 
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("estructuraModificarPagina",20, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // estructuraModificarPagina ::= MenorQue Accion Nombre Igual ModificarPagina MayorQue XRS XEs MenorQue Diagonal Accion MayorQue 
            {
              String RESULT =null;
		 System.out.printf("s1 --> XS XEs\n\n"); 
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("estructuraModificarPagina",20, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // estructuraModificarComponente ::= MenorQue Accion Nombre Igual ModificarComponente MayorQue AGC1 MenorQue Diagonal Accion MayorQue 
            {
              String RESULT =null;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("estructuraModificarComponente",36, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // GAEAS4 ::= Justificar 
            {
              String RESULT =null;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("GAEAS4",40, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // GAEAS4 ::= Derecha 
            {
              String RESULT =null;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("GAEAS4",40, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // GAEAS4 ::= Izquierda 
            {
              String RESULT =null;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("GAEAS4",40, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // GAEAS4 ::= Centrar 
            {
              String RESULT =null;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("GAEAS4",40, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // GAEAS3 ::= AtributoEtiquetas MayorQue 
            {
              String RESULT =null;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("GAEAS3",39, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // GAEAS3 ::= Padre MayorQue Identificador 
            {
              String RESULT =null;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("GAEAS3",39, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // GAEAS3 ::= Ancho MayorQue Entero 
            {
              String RESULT =null;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("GAEAS3",39, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // GAEAS3 ::= Altura MayorQue Entero 
            {
              String RESULT =null;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("GAEAS3",39, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // GAEAS3 ::= Origen MayorQue URL 
            {
              String RESULT =null;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("GAEAS3",39, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // GAEAS3 ::= Color MayorQue TextColor 
            {
              String RESULT =null;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("GAEAS3",39, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // GAEAS3 ::= Alineacion MayorQue GAEAS4 
            {
              String RESULT =null;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("GAEAS3",39, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // GAEAS3 ::= Texto MayorQue ValorParametro 
            {
              String RESULT =null;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("GAEAS3",39, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // GAEAS2 ::= GAEAS2 MenorQue Atributo Nombre Igual GAEAS3 MenorQue Diagonal Atributo MayorQue 
            {
              String RESULT =null;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("GAEAS2",38, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // GAEAS2 ::= MenorQue Atributo Nombre Igual GAEAS3 MenorQue Diagonal Atributo MayorQue 
            {
              String RESULT =null;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("GAEAS2",38, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // GAEAS ::= MenorQue Atributos MayorQue GAEAS2 MenorQue Diagonal Atributos MayorQue 
            {
              String RESULT =null;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("GAEAS",37, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // M61 ::= MenuComponente 
            {
              String RESULT =null;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("M61",17, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // M61 ::= VideoComponente 
            {
              String RESULT =null;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("M61",17, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // M61 ::= ParrafoComponente 
            {
              String RESULT =null;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("M61",17, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // M61 ::= ImagenComponente 
            {
              String RESULT =null;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("M61",17, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // M61 ::= TituloComponente 
            {
              String RESULT =null;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("M61",17, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // M41 ::= Clase MayorQue M61 
            {
              String RESULT =null;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("M41",16, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // M41 ::= Pagina MayorQue Identificador 
            {
              String RESULT =null;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("M41",16, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // M41 ::= Id MayorQue Identificador 
            {
              String RESULT =null;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("M41",16, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // M51 ::= M51 MenorQue Parametro Nombre Igual M41 MenorQue Diagonal Parametro MayorQue 
            {
              String RESULT =null;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("M51",15, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // M51 ::= MenorQue Parametro Nombre Igual M41 MenorQue Diagonal Parametro MayorQue 
            {
              String RESULT =null;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("M51",15, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // AGC1 ::= MenorQue Parametros MayorQue M51 MenorQue Diagonal Parametros MayorQue GAEAS 
            {
              String RESULT =null;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("AGC1",19, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // estructuraAgregarComponente ::= MenorQue Accion Nombre Igual AgregarComponente MayorQue AGC1 MenorQue Diagonal Accion MayorQue 
            {
              String RESULT =null;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("estructuraAgregarComponente",6, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // BC2 ::= MenorQue Parametro Nombre Igual Id MayorQue Identificador MenorQue Diagonal Parametro MayorQue MenorQue Parametro Nombre Igual Pagina MayorQue Identificador MenorQue Diagonal Parametro MayorQue 
            {
              String RESULT =null;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("BC2",31, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-21)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // BC1 ::= MenorQue Parametros MayorQue BC2 MenorQue Diagonal Parametros MayorQue 
            {
              String RESULT =null;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("BC1",29, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // estructuraBorrarComponente ::= MenorQue Accion Nombre Igual BorrarComponente MayorQue BC1 MenorQue Diagonal Accion MayorQue 
            {
              String RESULT =null;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("estructuraBorrarComponente",5, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // AEAS4 ::= Justificar 
            {
              String RESULT =null;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("AEAS4",35, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // AEAS4 ::= Derecha 
            {
              String RESULT =null;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("AEAS4",35, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // AEAS4 ::= Izquierda 
            {
              String RESULT =null;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("AEAS4",35, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // AEAS4 ::= Centrar 
            {
              String RESULT =null;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("AEAS4",35, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // AEAS3 ::= AtributoEtiquetas MayorQue 
            {
              String RESULT =null;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("AEAS3",34, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // AEAS3 ::= Padre MayorQue Identificador 
            {
              String RESULT =null;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("AEAS3",34, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // AEAS3 ::= Ancho MayorQue Entero 
            {
              String RESULT =null;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("AEAS3",34, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // AEAS3 ::= Altura MayorQue Entero 
            {
              String RESULT =null;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("AEAS3",34, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // AEAS3 ::= Origen MayorQue URL 
            {
              String RESULT =null;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("AEAS3",34, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // AEAS3 ::= Color MayorQue TextColor 
            {
              String RESULT =null;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("AEAS3",34, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // AEAS3 ::= Alineacion MayorQue AEAS4 
            {
              String RESULT =null;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("AEAS3",34, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // AEAS3 ::= Texto MayorQue ValorParametro 
            {
              String RESULT =null;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("AEAS3",34, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // AEAS2 ::= AEAS2 MenorQue Atributo Nombre Igual AEAS3 MenorQue Diagonal Atributo MayorQue 
            {
              String RESULT =null;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("AEAS2",33, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // AEAS2 ::= MenorQue Atributo Nombre Igual AEAS3 MenorQue Diagonal Atributo MayorQue 
            {
              String RESULT =null;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("AEAS2",33, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // AEAS ::= MenorQue Atributos MayorQue AEAS2 MenorQue Diagonal Atributos MayorQue 
            {
              String RESULT =null;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("AEAS",32, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // XN1 ::= UsuarioModificacion MayorQue Identificador 
            {
              String RESULT =null;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("XN1",8, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // XN1 ::= FechaModificacion MayorQue Fecha 
            {
              String RESULT =null;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("XN1",8, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // XN1 ::= FechaCreacion MayorQue Fecha 
            {
              String RESULT =null;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("XN1",8, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // XN1 ::= UsuarioCreacion MayorQue Identificador 
            {
              String RESULT =null;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("XN1",8, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // XN1 ::= Titulo MayorQue ValorParametro 
            {
              String RESULT =null;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("XN1",8, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // XN1 ::= Padre MayorQue Identificador 
            {
              String RESULT =null;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("XN1",8, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // XN1 ::= Sitio MayorQue Identificador 
            {
              String RESULT =null;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("XN1",8, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // XN1 ::= Id MayorQue Identificador 
            {
              String RESULT =null;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("XN1",8, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // XE2 ::= MenorQue Etiqueta Valor Igual DatoEntreComillas Diagonal MayorQue 
            {
              String RESULT =null;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("XE2",14, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // XE1 ::= XE1 XE2 
            {
              String RESULT =null;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("XE1",13, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // XE1 ::= XE2 
            {
              String RESULT =null;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("XE1",13, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // XEs ::= MenorQue Etiquetas MayorQue XE1 MenorQue Diagonal Etiquetas MayorQue 
            {
              String RESULT =null;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("XEs",10, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // XP2 ::= MenorQue Parametro Nombre Igual XN1 MenorQue Diagonal Parametro MayorQue 
            {
              String RESULT =null;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("XP2",12, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // XP1 ::= XP1 XP2 
            {
              String RESULT =null;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("XP1",11, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // XP1 ::= XP2 
            {
              String RESULT =null;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("XP1",11, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // XS ::= MenorQue Parametros MayorQue XP1 MenorQue Diagonal Parametros MayorQue 
            {
              String RESULT =null;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("XS",9, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // estructuraNuevaPagina ::= MenorQue Accion Nombre Igual NuevaPagina MayorQue XS MenorQue Diagonal Accion MayorQue 
            {
              String RESULT =null;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("estructuraNuevaPagina",1, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // estructuraNuevaPagina ::= MenorQue Accion Nombre Igual NuevaPagina MayorQue XS XEs MenorQue Diagonal Accion MayorQue 
            {
              String RESULT =null;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("estructuraNuevaPagina",1, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // BP2 ::= MenorQue Parametro Nombre Igual Id MayorQue Identificador MenorQue Diagonal Parametro MayorQue 
            {
              String RESULT =null;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("BP2",28, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // BP1 ::= MenorQue Parametros MayorQue BP2 MenorQue Diagonal Parametros MayorQue 
            {
              String RESULT =null;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("BP1",27, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // estructuraBorrarPagina ::= MenorQue Accion Nombre Igual BorrarPagina MayorQue BP1 MenorQue Diagonal Accion MayorQue 
            {
              String RESULT =null;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("estructuraBorrarPagina",4, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // BSW2 ::= MenorQue Parametro Nombre Igual Id MayorQue Identificador MenorQue Diagonal Parametro MayorQue 
            {
              String RESULT =null;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("BSW2",26, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // BSW1 ::= MenorQue Parametros MayorQue BSW2 MenorQue Diagonal Parametros MayorQue 
            {
              String RESULT =null;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("BSW1",25, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // estructuraBorrarSitioWeb ::= MenorQue Accion Nombre Igual BorrarSitioWeb MayorQue BSW1 MenorQue Diagonal Accion MayorQue 
            {
              String RESULT =null;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("estructuraBorrarSitioWeb",3, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // M4 ::= UsuarioModificacion MayorQue Identificador 
            {
              String RESULT =null;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("M4",23, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // M4 ::= FechaModificacion MayorQue Fecha 
            {
              String RESULT =null;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("M4",23, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // M4 ::= FechaCreacion MayorQue Fecha 
            {
              String RESULT =null;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("M4",23, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // M4 ::= UsuarioCreacion MayorQue Identificador 
            {
              String RESULT =null;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("M4",23, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // M4 ::= Id MayorQue Identificador 
            {
              String RESULT =null;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("M4",23, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // M5 ::= M5 MenorQue Parametro Nombre Igual M4 MenorQue Diagonal Parametro MayorQue 
            {
              String RESULT =null;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("M5",24, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // M5 ::= MenorQue Parametro Nombre Igual M4 MenorQue Diagonal Parametro MayorQue 
            {
              String RESULT =null;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("M5",24, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NSW1 ::= MenorQue Parametros MayorQue M5 MenorQue Diagonal Parametros MayorQue 
            {
              String RESULT =null;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("NSW1",18, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // estructuraNuevoSitioWeb ::= MenorQue Accion Nombre Igual NuevoSitioWeb MayorQue NSW1 MenorQue Diagonal Accion MayorQue 
            {
              String RESULT =null;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("estructuraNuevoSitioWeb",2, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // MX3 ::= estructuraModificarComponente 
            {
              String RESULT =null;
		 parser.manejador.accionTerminada("MODIFICAR COMPONENTE");  
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("MX3",7, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // MX3 ::= estructuraModificarPagina 
            {
              String RESULT =null;
		 parser.manejador.accionTerminada("MODIFICAR PAGINA");  
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("MX3",7, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // MX3 ::= estructuraAgregarComponente 
            {
              String RESULT =null;
		 parser.manejador.accionTerminada("AGREGAR COMPONENTE");  
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("MX3",7, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // MX3 ::= estructuraBorrarComponente 
            {
              String RESULT =null;
		 parser.manejador.accionTerminada("BORRAR COMPONENTE");  
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("MX3",7, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // MX3 ::= estructuraBorrarPagina 
            {
              String RESULT =null;
		 parser.manejador.accionTerminada("BORRAR PAGINA");  
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("MX3",7, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // MX3 ::= estructuraBorrarSitioWeb 
            {
              String RESULT =null;
		 parser.manejador.accionTerminada("BORRAR SITIO WEB");  
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("MX3",7, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // MX3 ::= estructuraNuevoSitioWeb 
            {
              String RESULT =null;
		 parser.manejador.accionTerminada("NUEVO SITIO WEB");  
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("MX3",7, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // MX3 ::= estructuraNuevaPagina 
            {
              String RESULT =null;
		 parser.manejador.accionTerminada("NUEVA PAGINA");  
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("MX3",7, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // M3 ::= M3 MX3 
            {
              String RESULT =null;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("M3",22, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // M3 ::= MX3 
            {
              String RESULT =null;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("M3",22, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // M1 ::= MX3 
            {
              String RESULT =null;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("M1",21, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // M1 ::= MenorQue Acciones MayorQue M3 MenorQue Diagonal Acciones MayorQue 
            {
              String RESULT =null;

              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("M1",21, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // GENESIS ::= M1 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.peek()).value;
		 System.out.println(" -------------- Lectura de documento XML terminada.  -------------- "); 
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("GENESIS",0, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= GENESIS EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Analisis_Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.elementAt(CUP$Analisis_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analisis_Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Analisis_Sintactico$parser.done_parsing();
          return CUP$Analisis_Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

